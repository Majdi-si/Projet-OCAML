1) Faire au début un algo glouton pour classer les départs selon l'heure de début et l'Estimated take off time (ETOT)  : on a donc un TTOT (avec des retards) tq ETOT < TTOT



On a donc une attente égale à TTOT - ETOT

Voir conflits de parking avec les arrivées

Il faut ensuite respecter les créneaux du NMOC tq ETOT appartient à [-5, +10]

2) Optimiser l'algo 

Séance 2 : 

1. Faire un type vol et mettre un champ mutable dedans pour etot et ensuite faire un tableau de vol -> OK
Faire un .mli pour le type et les fonctions (ex : mettre juste type vol et les signatures des fonctions) -> OK
Faire un makefile

2.Faire un liste d'etot par piste et ensuite faire un algo pour les trier en appliquant les contraintes (TTOT) dans l'ordre de décollage
-> c'est les turbulences de sillage qui font que les avions ne peuvent pas décoller en même temps et donc le retard

3. Calculer les conflits de parking (on dit que le temps d'embarquement est de 15 minutes)

! Tous les calculs pour les vols se font dans un même module !

! Le reste dans un autre module !


Séance 3 :

1. Renommer programme_fichier.ml en vols.ml -> ok
2. Faire un liste d'etot par piste et ensuite faire un algo pour les trier en appliquant les contraintes (TTOT) dans l'ordre de décollage -> ok
3. Faire algo pour les conflits de parking pour calculer les retards à mettre 
4. Faire des courbes et histogrammes pour les retards -> utiliser gnuplot ou sinon mettre dans un fichier les données et les traiter avec python


ARR -> 26L et 27R
DEP -> 26R et 27L

Séance 4 :

1. Vérifier les calculs: retard moyen par piste, par heure, voir si ça correspond à une autre ou y'a beaucoup de vols etc...26L
2. prendre en compte l'heure de créneau -> pour les vols où il y en a, on a etot = creneau  --> OK
3. Voir le nb de creneaux raté : TTOT > creneau + 10 min
4. DMAN -> Nouveau départ du parking : TTOT - 5*nombre_points
5. Heure arrivée au parking : Heure_dep + 5*nombre_points
6. Voir s'il y a des conflits dans le fichier : embarquer = 15 min, débarquer = 15 min
7. Voir les conflits avec Nouveau départ parking
8. Par parking: regarder qui occupe le parking quand afin de detecter les conflits (avec Hashtbl (equivalent dictionnaire ocaml))
9. Utiliser la hashtable pour mettre la liste des vols pour chaque parking
10. Faire un histogramme par heure pour les retards moyens, ...

Séance 5:
1. Hashtbl : regarder si le parking est déjà dans la liste avec Hashtbl.mem -> ok
2. Hashtbl.iter (fun pkg vols -> Hashtbl.replace h pkg (list.sort cmp vols)) -> ok
3. faire fonction de comparaison cmp: vol1 -> vol2 -> int (<0 si <vol2;>0 si >vol2;=0) -> ok
let cmp vol1 vol2 = compare vol1.heure_parking vol2.heure_parking -> ok
4. créer un fichier csv différent a chaque fois qui contient (mettre en nom du fichier csv les paramètres choisis)
heure NB_vols retard Nb_conflit_parking Nb_crénaux_ratés
0
1
2
etc --> ok
5. demander des paramètres en entée (genre le temps au parking etc)
6. chercher algorithme pour trouver la séquence optimale -> ok


Séance 6 : 
1. Propager le retard en prenant le dernier vol de la séquence précédente
2. Mettre etot = ttot à chaque vol avant optimisation
3. Résoudre nombre de conflits de parking